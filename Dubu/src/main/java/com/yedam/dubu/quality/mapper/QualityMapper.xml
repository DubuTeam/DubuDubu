<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.dubu.quality.mapper.QualityMapper">

	<!-- 조회 -->

	<!-- <select id="selectQualityList" resultType="QualityVO"> SELECT pi.EDCTS_LOT_NO 
		, COALESCE(pi.EDCTS_CD, 'N/A') AS EDCTS_CD , os.PRDT_NM , COALESCE(pi.INSP_JM, 
		'N/A') AS INSP_JM , pi.INSP_DT , COALESCE(pi.INSP_PSCH, ' N/A') AS INSP_PSCH 
		FROM PRDT_INSP pi JOIN ORDER_SHEET os ON pi.ORDER_NO = os.ORDER_NO WHERE 
		(pi.INSP_DT BETWEEN '2023-01-01' AND '2023-05-02') OR (pi.EDCTS_LOT_NO = 
		'LOT2') </select> -->

	<!-- <select id="selectQualityList" resultType="QualityVO"> SELECT p.EDCTS_LOT_NO 
		"LOT번호", p.EDCTS_CD "제품코드", e.PRDT_NM "제품명", p.INSP_JM "최종판정", TO_CHAR(p.INSP_DT, 
		'YYYY-MM-DD') "검사날짜", p.INSP_PSCH "검사자" FROM PRDT_INSP p, EDCTS e WHERE p.EDCTS_CD 
		= e.EDCTS_CD AND INSP_JM IS NOT NULL <if test="edctsLotNo != null and edctsLotNo 
		!=''">and EDCTS_LOT_NO LIKE '%'||'LOT2'||'%'</if> <if test="startDt != null"><![CDATA[and 
		INSP_DT >= '2023-01-01']]></if> <if test="endDt != null"><![CDATA[and INSP_DT 
		<= '2023-05-02']]></if> ORDER BY EDCTS_LOT_NO </select> -->
	<select id="selectQualityList" resultType="QualityVO">
		SELECT p.*, e.PRDT_NM
		FROM PRDT_INSP p, EDCTS e
		WHERE p.EDCTS_CD =
		e.EDCTS_CD
		AND INSP_JM IS NOT NULL
		<if test="edctsLotNo != null and edctsLotNo !=''">and EDCTS_LOT_NO LIKE '%'||#{edctsLotNo}||'%'</if>
		<if test="startDt != null"><![CDATA[and INSP_DT >= #{startDt}]]></if>
		<if test="endDt != null"><![CDATA[and INSP_DT <= #{endDt}]]></if>
		ORDER BY EDCTS_LOT_NO
	</select>

	<select id="getPrdtInsp" resultType="QualityVO">
		SELECT p.*, e.PRDT_NM
		FROM PRDT_INSP p, EDCTS e
		WHERE p.EDCTS_CD =
		e.EDCTS_CD
		AND INSP_JM IS NOT NULL
		<if test="edctsLotNo != null and edctsLotNo !=''">and EDCTS_LOT_NO LIKE '%'||#{edctsLotNo}||'%'</if>
		<if test="startDt != null"><![CDATA[and INSP_DT >= #{startDt}]]></if>
		<if test="endDt != null"><![CDATA[and INSP_DT <= #{endDt}]]></if>
		ORDER BY EDCTS_LOT_NO
	</select>

	<select id="getPrdtInspDtl" resultType="QualityVO">
		SELECT *
		FROM
		PRDT_INSP_DTL
		WHERE EDCTS_LOT_NO = #{edctsLotNo}
	</select>

	<select id="getMatVendList" parameterType="QualityVO"
		resultType="QualityVO">   <!-- 업체명 조회 모달 -->
		select VEND_CD, VEND_NM, BINZO, TELNO
		from VEND
		where UPPER(VEND_NM)
		like UPPER('%${vendNm}%')
		and UPPER(VEND_CD) like UPPER('%${vendCd}%')
	</select>

	<select id="getMatOrdrList" parameterType="QualityVO"
		resultType="QualityVO">
		select rod.RSC_CD, rsc.RSC_NM, rod.ORDR_CD, rod.ORDR_CNT, rod.RMN_CNT,
		vend.VEND_NM, rsc.MNG_UNIT, rsc.RSC_SPEC, rod.ORDR_DTL_CD
		from RSC_ORDR
		ro,
		RSC_ORDR_DTL rod,
		VEND,
		RSC
		where ro.ORDR_CD = rod.ORDR_CD
		and
		rod.RSC_CD = rsc.RSC_CD
		and rod.RMN_CNT != 0
		and ro.VEND_CD =
		vend.VEND_CD
		<if test=" vendCd !=null and !vendCd.equals('') ">and ro.VEND_CD = #{vendCd}</if>
        <![CDATA[
          and rod.PAPRD_CMND_DT >= TO_CHAR(#{startDt}, 'YYYY-MM-DD')
          and rod.PAPRD_CMND_DT <= TO_CHAR(#{endDt}, 'YYYY-MM-DD')
        ]]>
		order by PAPRD_CMND_DT
	</select>

	<!-- <insert id="setRscInfList"> 수량 인서트 merge into RSC_INFER using dual 
		on (RSC_CD = #{insp.rscCd} and RSC_INSP_CD = #{insp.rscInspCd} and ORDR_CD 
		= #{insp.ordrCd} and CCD_DTL = #{inf.ccdDtl}) when matched then update set 
		INF_CNT = #{inf.infCnt} when not matched then insert (CCD_DTL, RSC_CD, RSC_INSP_CD, 
		INF_CNT, ORDR_CD) values (#{inf.ccdDtl}, #{insp.rscCd}, #{insp.rscInspCd}, 
		to_number(#{inf.infCnt}), #{insp.ordrCd}) </insert> -->

	<insert id="setRscInfList">
		<!-- 수량 인서트 -->
		merge into RSC_INFER
		using dual
		on (RSC_CD = #{insp.rscCd} and INSP_CD =
		#{insp.inspCd}
		and ORDR_CD = #{insp.ordrCd} and CCD_DTL =
		#{inf.ccdDtl})
		when matched then
		update
		set INF_CNT = #{inf.infCnt}
		when
		not matched then
		insert (CCD_DTL, RSC_CD, INSP_CD, INF_CNT, ORDR_CD)
		values (#{inf.ccdDtl}, #{insp.rscCd}, #{insp.inspCd},
		to_number(#{inf.infCnt}), #{insp.ordrCd})
	</insert>



	<!-- 자재검사관리 검사상세 불량코드 리스트 출력 -->

	<select id="getInfCdList" resultType="QualityVO">
		SELECT *
		FROM CCDS_DTL
		WHERE
		CCD = 'INF'
		ORDER BY CCD_DTL
	</select>

	<!-- <insert id="setRscInspList" parameterType="RscInspVO"> insert into 
		RSC_INSP_DTL (RSC_CD, INSP_CD, ORDR_CD, INSP_CNT, INSP_PASS_CNT, INSP_FAIL_CNT, 
		PRE_IST_CNT) values (#{rscCd}, #{inspCd}, #{ordrCd}, #{inspCnt}, to_number(#{inspPassCnt}), 
		to_number(#{inspFailCnt}), #{preIstCnt}) </insert> -->
	<!-- 시퀀스 인서트 -->
	<!-- <insert id="setRscInspList" parameterType="RscInspVO"> insert into 
		RSC_INSP_DTL (INSP_DTL_CD, RSC_CD, INSP_CD, ORDR_CD, INSP_CNT, INSP_PASS_CNT, 
		INSP_FAIL_CNT, PRE_IST_CNT) values (INSP_DTL_CD_SEQ.NEXTVAL, #{rscCd}, #{inspCd}, 
		#{ordrCd}, #{inspCnt}, to_number(#{inspPassCnt}), to_number(#{inspFailCnt}), 
		#{preIstCnt}) </insert> -->
		
		
	<!-- 검사 등록 INSERT -->
	<insert id="setRscInspList" parameterType="RscInspVO">
		<selectKey keyProperty="inspDtlCd" resultType="String"
			order="BEFORE">
			select 'IDC'|| LPAD(INSP_DTL_CD_SEQ2.NEXTVAL, 4, '0') as
			INSP_DTL_CD
			from dual
		</selectKey>
		insert into RSC_INSP_DTL (INSP_DTL_CD, INSP_CD, RSC_CD, ORDR_CD,
		ORDR_DTL_CD, INSP_CNT, INSP_PASS_CNT,
		INSP_FAIL_CNT, PRE_IST_CNT)
		values (#{inspDtlCd}, #{inspCd}, #{rscCd}, #{ordrCd}, #{ordrDtlCd},
		#{inspCnt}, to_number(#{inspPassCnt}),
		to_number(#{inspFailCnt}),
		#{preIstCnt} )
	</insert>


	<!-- 검사 등록 시 업데이트 -->
	<!-- <update id="upRscProg" parameterType="RscInspVO">
		UPDATE RSC_ORDR
		SET RSC_PROGRESS = '검사완료'
		WHERE ORDR_CD = #{ordrCd}
	</update> -->
	
	<update id="upRscProg" parameterType="RscInspVO">
	UPDATE RSC_ORDR
	SET RSC_PROGRESS = '검사완료'
	WHERE ORDR_CD = #{ordrCd}
	</update>



	<select id="genRscNoOrdrCd" resultType="String">  <!-- 검사코드 -->
		select 'NOR' || to_char(sysdate, 'YYYYMMDD') ||
		lpad(NVL(max(substr(ORDR_CD, 12, 3)), 0) + 1, 3, '0')
		from rsc_insp_dtl
		where 'NOR' = substr(ORDR_CD, 0, 3)
		and substr(ORDR_CD, 4, 8) =
		to_char(sysdate, 'yyyymmdd')
	</select>
	<select id="genRscInspCd" resultType="String">
		select 'RMI' ||
		to_char(sysdate, 'YYYYMMDD') || lpad(NVL(max(substr(insp_cd,
		12, 3)),
		0) + 1, 3, '0')
		from rsc_insp_dtl
		where substr(insp_cd, 4, 8) =
		to_char(sysdate, 'yyyymmdd')
	</select>
	<insert id="setRscInsp" parameterType="RscInspVO">
		merge into RSC_INSP
		using
		dual
		on (INSP_CD = #{inspCd})
		when matched then
		update
		set INSP_DT =
		#{inspDt},
		INSP_TSTR = #{inspTstr}
		when not matched then
		insert (INSP_CD,
		INSP_DT, INSP_TSTR)
		values (#{inspCd}, #{inspDt}, #{inspTstr})
	</insert>

	<update id="updRscOrdrRmnCnt" parameterType="RscInspVO">
		update RSC_ORDR_DTL
		set RMN_CNT = RMN_CNT - #{preIstCnt}
		where ORDR_CD = #{ordrCd}
		and
		RSC_CD = #{rscCd}
	</update>
<!-- 
		select ri.INSP_DT, count(*) inspCnt, ri.INSP_CD
		from
		RSC_INSP ri,
		RSC_INSP_DTL rid
		where ri.INSP_CD = rid.INSP_CD
		group by
		INSP_DT, ri.INSP_CD
		order by INSP_CD desc -->
	<select id="schRscInspHist" parameterType="RscInspVO" resultType="RscInspVO">
		SELECT ri.INSP_CD, ri.INSP_TSTR, ri.INSP_DT, COUNT(*) AS inspCnt
		FROM RSC_INSP ri
		JOIN RSC_INSP_DTL rid ON ri.INSP_CD = rid.INSP_CD
		GROUP BY ri.INSP_CD, ri.INSP_TSTR, ri.INSP_DT
		ORDER BY ri.INSP_CD DESC
	</select>

	<delete id="delRscInspHist" parameterType="RscInspVO">
		delete
		from RSC_INSP
		where INSP_CD = #{inspCd}
	</delete>

</mapper>